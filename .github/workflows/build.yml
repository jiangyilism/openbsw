name: Build S32k and posix platform

on: [workflow_call, push, pull_request, workflow_dispatch]

jobs:
  run-command:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [posix-gcc, posix-clang, s32k148]
        cpp-standard: [14, 17, 20]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache CMake files
        id: cache-cmake
        uses: actions/cache@v3
        with:
          path: |
            cmake-build-posix
            cmake-build-s32k148
          key: ${{ runner.os }}-cmake-${{ matrix.platform }}-${{ matrix.cpp-standard }}-${{ hashFiles('**/*.cpp', '**/*.h',  '**/*.cmake', '**/*.txt', '**/*.c', '**/*.s', 'admin/cmake/ArmNoneEabi.cmake') }}
          restore-keys: |
            ${{ runner.os }}-cmake-${{ matrix.platform }}-${{ matrix.cpp-standard }}-

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.22.x'

      - name: Set up ARM GCC
        if: ${{ matrix.platform == 's32k148' }}
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '10.3-2021.10'

      - name: Install LLVM and Clang
        if: ${{ matrix.platform == 'posix-clang' }}
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "17"
          env: true

      - name: Configure CMake for POSIX
        if: ${{ startsWith(matrix.platform, 'posix') && steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: |
          rm -rf cmake-build-posix
          cmake \
          -B cmake-build-posix \
          -S executables/referenceApp \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp-standard }}

      - name: Configure CMake for S32K148
        if: ${{ matrix.platform == 's32k148' && steps.cache-cmake.outputs.cache-hit != 'true' }}
        run: |
          rm -rf cmake-build-s32k148
          cmake \
          -B cmake-build-s32k148 \
          -S executables/referenceApp \
          -DCMAKE_CXX_STANDARD=${{ matrix.cpp-standard }} \
          -DBUILD_TARGET_PLATFORM="S32K148EVB" \
          --toolchain ../../admin/cmake/ArmNoneEabi.cmake

      - name: Build for ${{ matrix.platform }}
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        run: cmake --build cmake-build-${{ startsWith(matrix.platform, 'posix') && 'posix' || matrix.platform }} --target app.referenceApp -j
